// Min amount of space between start and end hint.
$wes-form-field-hint-min-space: 1em !default;
// Infix stretches to fit the container, but naturally wants to be this wide. We set this in order
// to have a a consistent natural size for the various types of controls that can go in a form
// field.
$wes-form-field-default-infix-width: 180px !default;

.wes-form-field-error-message {
  color: $global-colour-red-700;
}

// The Input element proper.
.wes-input-element {
  // Font needs to be inherited, because by default <input> has a system font.
  font: inherit;

  // The Material input should match whatever background it is above.
  background: transparent;

  // If background matches current background then so should the color for proper contrast
  color: currentColor;

  // By default, <input> has a padding, border, outline and a default width.
  border: none;
  outline: none;
  padding: 0;
  margin: 0;
  width: 100%;

  // Prevent textareas from being resized outside the form field.
  max-width: 100%;

  // Needed to make last line of the textarea line up with the baseline.
  vertical-align: bottom;

  // User agent stylesheets set the text-align of inputs explicitly to "start". Those can be
  // easily overwritten by targeting the input element using a simple CSS selector, but since
  // the text-align will be applied most of the time on the `wes-form-field` to also align the
  // placeholder, the alignment should be inherited here.
  text-align: inherit;

  // Undo the red box-shadow glow added by Firefox on invalid inputs.
  // See https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-ui-invalid
  &:-moz-ui-invalid {
    box-shadow: none;
  }

  // Remove IE's default clear and reveal icons.
  &::-ms-clear,
  &::-ms-reveal {
    display: none;
  }

  // Clear Safari's decorations for search fields.
  &,
  &::-webkit-search-cancel-button,
  &::-webkit-search-decoration,
  &::-webkit-search-results-button,
  &::-webkit-search-results-decoration {
    -webkit-appearance: none;
  }

  // Also clear Safari's autofill icons. Note that this can't be in the
  // same selector as the IE ones, otherwise Safari will ignore it.
  &::-webkit-contacts-auto-fill-button,
  &::-webkit-caps-lock-indicator,
  &::-webkit-credentials-auto-fill-button {
    visibility: hidden;
  }

  &[type='date'],
  &[type='datetime'],
  &[type='datetime-local'],
  &[type='month'],
  &[type='week'],
  &[type='time'] {
    // Due to the native input masking these inputs can be slightly taller than
    // the plain text inputs. We normalize it by resetting the line height.
    line-height: 1;

    // Fixes an issue on iOS where the following input types will collapse to 1px,
    // if they're empty, because we've overridden their background color.
    // See: https://stackoverflow.com/questions/18381594/input-type-date-appearance-in-safari-on-ios
    &::after {
      content: ' ';
      white-space: pre;
      width: 1px;
    }
  }

  // Reduce the size of the native buttons in a date/time input,
  // because they can increase the height of the input (see #13317).
  &::-webkit-inner-spin-button,
  &::-webkit-calendar-picker-indicator,
  &::-webkit-clear-button {
    font-size: 0.75em;
  }

  @include input-placeholder {
    // Prevent users from being able to select the placeholder text. Most of the time this can't
    // happen, however it's possible to do it when clicking on a disabled input (see #13479).
    @include user-select(none);

    &:-ms-input-placeholder {
      // fix IE11 not able to focus programmatically with css style -ms-user-select: none
      // see https://github.com/angular/components/issues/15093
      -ms-user-select: text;
    }
  }

  .wes-form-field-hide-placeholder & {
    // Note that we can't use something like visibility: hidden or
    // display: none, because IE ends up preventing the user from
    // focusing the input altogether.
    @include input-placeholder {
      // Needs to be !important, because the placeholder will end up inheriting the
      // input color in IE, if the consumer overrides it with a higher specificity.
      color: transparent !important;

      // Overwrite browser specific CSS properties that can overwrite the `color` property.
      // Some developers seem to use this approach to easily overwrite the placeholder and
      // label color. See: https://github.com/angular/components/issues/12074
      -webkit-text-fill-color: transparent;

      // Remove the transition to prevent the placeholder
      // from overlapping when the label comes back down.
      transition: none;
    }
  }
}

// Prevents IE from always adding a scrollbar by default.
textarea.wes-input-element {
  // Only allow resizing along the Y axis.
  resize: vertical;
  overflow: auto;

  &.cdk-textarea-autosize {
    resize: none;
  }
}

textarea.wes-input-element {
  // The 2px padding prevents scrollbars from appearing on Chrome even when they aren't needed.
  // We also add a negative margin to negate the effect of the padding on the layout.
  padding: 2px 0;
  margin: -2px 0;
}

// Remove the native select down arrow and replace it with material design arrow
select.wes-input-element {
  -moz-appearance: none;
  -webkit-appearance: none;
  position: relative;
  background-color: transparent;
  display: inline-flex;
  box-sizing: border-box;
  padding-top: 1em;
  top: -1em;
  margin-bottom: -1em;

  &::-ms-expand {
    display: none;
  }

  // The `outline: none` from `.wes-input-element` works on all browsers, however Firefox also
  // adds a special `focus-inner` which we have to disable explicitly. See:
  // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Firefox
  &::-moz-focus-inner {
    border: 0;
  }

  &:not(:disabled) {
    cursor: pointer;
  }

  // As a part of its user agent styling, IE11 has a blue box inside each focused
  // `select` element which we have to reset. Note that this needs to be in its own
  // selector, because having it together with another one will cause other browsers
  // to ignore it.
  &::-ms-value {
    // We need to reset the `color` as well, because IE sets it to white.
    color: inherit;
    background: none;
  }
}

.wes-form-field-type-wes-native-select {
  $arrow-size: 5px;

  .wes-form-field-infix::after {
    content: '';
    width: 16px;
    height: 10px;
    background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 16 9' xmlns='http://www.w3.org/2000/svg' focusable='false'%3E%3Cg fill='none' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke='%2340474F' stroke-width='2'%3E%3Cpath d='M15 1L8 8M1 1l7 7-7-7z'/%3E%3C/g%3E%3C/svg%3E");
    background-repeat: no-repeat;
    position: absolute;
    top: 50%;
    right: 0;
    margin-top: -$arrow-size / 2;

    // Make the arrow non-clickable so the user can click on the form control under it.
    pointer-events: none;
  }

  .wes-input-element {
    // The arrow is 2 * $arrow-size wide and we add one more width for some spacing.
    $padding: $arrow-size * 3;
    padding-right: $padding;
  }

  // Ensure that long labels don't collide with the select arrow.
  .wes-form-field-label-wrapper {
    max-width: calc(100% - #{$arrow-size * 2});
  }

  &.wes-form-field-appearance-outline .wes-form-field-infix::after {
    margin-top: -$arrow-size;
  }

  &.wes-form-field-appearance-fill .wes-form-field-infix::after {
    margin-top: -$arrow-size * 2;
  }
}
.wes-form-field-flex {
  display: inline-flex;
  align-items: baseline;
  box-sizing: border-box;
  width: 100%;
}

.wes-form-field {
  display: inline-block;
  position: relative;

  // To avoid problems with text-align.
  text-align: left;
}

// Global wrapper. We need to apply margin to the element for spacing, but
// cannot apply it to the host element directly.
.wes-form-field-wrapper {
  position: relative;

  border: 1px solid #b3b5b9;
  border-radius: 4px;
  background-color: #ffffff;
  padding: 14px 16px;

  &:hover {
    border-color: #40474f;
  }
  .wes-form-field-invalid & {
    border: 2px solid #d72d41;
    background-color: #fefafb;
  }
  .wes-focused & {
    @extend %focus-state;
  }
}

// We use a flex layout to baseline align the prefix and suffix elements.
// The underline is outside of it so it can cover all of the elements under this flex container.
.wes-form-field-flex {
  display: inline-flex;
  align-items: baseline;
  box-sizing: border-box;
  width: 100%;
}

.wes-form-field-prefix,
.wes-form-field-suffix {
  white-space: nowrap;
  flex: none;
  position: relative;
}

.wes-form-field-infix {
  display: block;
  position: relative;
  flex: auto;
  min-width: 0;
  width: $wes-form-field-default-infix-width;
}

.wes-form-field-label {
  font: inherit;
  pointer-events: none; // We shouldn't catch mouse events (let them through).
  font-weight: 600;

  // Put ellipsis text overflow.
  width: 100%;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}

// Server-side rendered matInput with focus or a placeholder attribute but placeholder not shown
// (used as a pure CSS stand-in for wes-form-field-should-float).
.wes-input-server:focus + .wes-form-field-label-wrapper .wes-form-field-label,
.wes-input-server[placeholder]:not(:placeholder-shown)
  + .wes-form-field-label-wrapper
  .wes-form-field-label {
  display: none;

  .wes-form-field-can-float & {
    display: block;
  }
}

// Wrapper for the hints and error messages.
.wes-form-field-subscript-wrapper {
  //   position: absolute;
  box-sizing: border-box;
  width: 100%;
  overflow: hidden; // prevents multi-line errors from overlapping the control
}

// Scale down icons in the label and hint to be the same size as the text.
.wes-form-field-subscript-wrapper,
.wes-form-field-label-wrapper {
  .wes-icon {
    width: 1em;
    height: 1em;
    font-size: inherit;
    vertical-align: baseline;
  }
}

// Clears the floats on the hints. This is necessary for the hint animation to work.
.wes-form-field-hint-wrapper {
  display: flex;
}

// Spacer used to make sure start and end hints have enough space between them.
.wes-form-field-hint-spacer {
  flex: 1 0 $wes-form-field-hint-min-space;
}

// Single error message displayed beneath the form field underline.
.wes-error {
  display: block;
}

// Element that can used to reliably align content in relation to the form field control.
.wes-form-field-control-wrapper {
  position: relative;
}

//Below is temp, needs refactoring
.wes-form-field-label {
  display: block;
}
